using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;
using System.Drawing;

namespace ECG_Heart_Beat_Classification
{
    public static class HelperMethods
    {
        static string signalPath = "Signal.txt";
        static string filteredSignalPath = "Filtered_Signal.txt";
       
        
        public static string RunPythonScript(string pythonInterpreter, string arguments)
        {
            System.Diagnostics.ProcessStartInfo start = new System.Diagnostics.ProcessStartInfo();
            //python interprater location
            start.FileName = pythonInterpreter;// @"C:\Users\EngMahmoud\Anaconda3\python.exe";
            //argument with file name and input parameters
            start.Arguments = arguments;// string.Format("{0} {1}", Path.Combine(@"C:\Users\EngMahmoud\Desktop\", "ReadSignalRecord.py"), @"mitdb\100");
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            start.LoadUserProfile = true;
            using (System.Diagnostics.Process process = System.Diagnostics.Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return result;
                }
            }
        }
        public static List<double> LoadSignal(string path, int signalLength)
        {
            List<double> signal = new List<double>();
            StreamReader rd = new StreamReader(path);
            string sig = rd.ReadToEnd();
            string[] sigValues = sig.Split('|');
            if (signalLength == 0)
                signalLength = sigValues.Length;

            for (int i = 0; i < signalLength; i++)
            {
                try
                {
                    signal.Add(double.Parse(sigValues[i]));
                    //chart1.Series["Series1"].Points.AddY(double.Parse(sigValues[i]));
                }
                catch
                {
                    continue;
                }

            }
            return signal;
        }
        public static List<List<double>> LoadBeats(string path)
        {
            List<List<double>> beats = new List<List<double>>();
            StreamReader rd = new StreamReader(path);
            string fileContent = rd.ReadToEnd();
            string[] sbeats = fileContent.Split('\n');
            for (int i = 0; i < sbeats.Length; i++) 
            {
                string[] beat = sbeats[i].Split('|');
                List<double> beatValues = new List<double>();
                for(int j = 0;j< beat.Length;j++)
                {
                    try
                    {
                        beatValues.Add(double.Parse(beat[j]));
                    }
                    catch
                    {
                        continue;
                    }

                }
                beats.Add(beatValues);
            }
            return beats;
        }
        public static List<int> LoadRPeaksInds(string path)
        {
            List<int> RPeaks = new List<int>();
            StreamReader rd = new StreamReader(path);
            string fileContent = rd.ReadToEnd();
            string[] inds = fileContent.Split('|');
            for (int i = 0; i < inds.Length; i++) 
            {
                try
                {
                    RPeaks.Add(int.Parse(inds[i]));
                }
                catch
                {
                    continue;
                }
                
            }
            return RPeaks;
        }
        public static List<string> LoadClassifications(string path)
        {
            List<string> classifications = new List<string>();
            Dictionary<int, string> annotations = new Dictionary<int, string>();
            annotations[0] = "Normal";
            annotations[1] = "L";
            annotations[2] = "R";
            annotations[3] = "A";
            annotations[4] = "a";
            annotations[5] = "J";
            annotations[6] = "V";
            annotations[7] = "F";
            annotations[8] = "!";
            annotations[9] = "e";
            annotations[10] = "j";
            annotations[11] = "E";
            annotations[12] = "/";
            annotations[13] = "F";
            annotations[14] = "x";
            annotations[15] = "Q";
            StreamReader rd = new StreamReader(path);
            string fileContent = rd.ReadToEnd();
            string[] labels = fileContent.Split('|');
            for (int i = 0; i < labels.Length; i++)
            {
                int r;
                try
                {
                    r = int.Parse(labels[i]);
                    classifications.Add(annotations[r]);
                }
                catch
                {
                    continue;
                }
                
            }
            return classifications;
        }
        public static Dictionary<string,int> GetClassesCount(List<string> classifications)
        {
            Dictionary<string, int> classes = new Dictionary<string, int>();
            for (int i = 0; i < classifications.Count; i++)
            {
                string cls = classifications[i];
                if (classes.ContainsKey(cls))
                    classes[cls] += 1;
                else
                    classes[cls] = 1;
            }
            return classes;
        }
        public static void DrawAnnotations(Chart chart1 , int signalLength)
        {
            List<int> RPeaks = HelperMethods.LoadRPeaksInds("R_Peaks.txt");
            List<string> classifications = HelperMethods.LoadClassifications("beats_Classes.txt");
            MessageBox.Show(RPeaks.Count.ToString());
            MessageBox.Show(classifications.Count.ToString());

            for (int i = 0; i < RPeaks.Count; i++)
            {
                if (RPeaks[i] >= signalLength)
                    break;
                TextAnnotation ann = new TextAnnotation();
                ann.Text = classifications[i];
                ann.SetAnchor(chart1.Series[0].Points[RPeaks[i]]);
                chart1.Annotations.Add(ann);
                chart1.Series[0].Points[RPeaks[i]].MarkerStyle = MarkerStyle.Cross;
                chart1.Series[0].Points[RPeaks[i]].MarkerColor = Color.Red;
            }
        }
        public static void DrawBeats(FlowLayoutPanel flow ,int numOfBeats, int distanceBetweenBeats)
        {
            Chart old = (Chart)flow.Controls[0];
            
            
            
            //Size s = flow.Controls[0].Size;
            
            flow.Controls.Clear();
            List<List<double>> beats = LoadBeats("beats.txt");
            //chart.Series[0].EmptyPointStyle.Color = Color.Transparent;
            for (int l = 0; l < numOfBeats;l++)
            {
                //old.Serializer.Save(myStream);
                Chart chart = new Chart();


                

                
                
                chart.ChartAreas.Add("Beat " + (l + 1).ToString());
                
                chart.Series.Add("Beat " + (l + 1).ToString());
                chart.Size = old.Size;
                chart.Series[0].Name = "Beat " + (l + 1).ToString(); 
                chart.Series[0].IsVisibleInLegend = false;
                chart.Series[0].ChartType = SeriesChartType.Spline;
                chart.Titles.Add( "Beat " + (l + 1).ToString());
                //chart.Series[0];

                //chart.Series.Add("Beat " + (l + 1).ToString());

                //chart.Series[0].Color = Color.Black;
                List<double> beat = beats[l];
                //MessageBox.Show(beat.Count.ToString());
                foreach (var value in beat)
                {
                    chart.Series[0].Points.AddY(value);
                }
                chart.ChartAreas[0].AxisX.MajorGrid.LineColor = chart.BackColor;
                chart.ChartAreas[0].AxisY.MajorGrid.LineColor = chart.BackColor;
               
                flow.Controls.Add(chart);
               
                //chart.Series[0].Color = Color.Red;
                for (int i = 0; i < distanceBetweenBeats; i++) 
                {
                    
                    //chart.DataManipulator.InsertEmptyPoints(20, IntervalType.Number, chart.Series[0]);
                    chart.Series[0].Points.AddY(0);
                    chart.Series[0].Points.Last().Color = Color.Transparent;
                }
                //chart.Series[0].Color = Color.Black;
            }
            
        }
        public static void MakeScrollingChart(Chart chart1 ,int blockSize,float minY,float maxY)
        {
            int size = blockSize;
            chart1.ChartAreas[0].AxisY.Minimum = minY;
            chart1.ChartAreas[0].AxisY.Maximum = maxY;

            chart1.ChartAreas[0].AxisX.ScrollBar.Enabled = true;
            // let's zoom to [0,blockSize] (e.g. [0,100])
            chart1.ChartAreas[0].AxisX.ScaleView.Zoomable = true;
            int position = 0;
            chart1.ChartAreas[0].AxisX.ScaleView.Zoom(position, size);

            // disable zoom-reset button (only scrollbar's arrows are available)

            // set scrollbar small change to blockSize (e.g. 100)
            //chart1.ChartAreas[0].AxisX.ScaleView.SmallScrollSize = 300;
            chart1.ChartAreas[0].AxisX.MajorGrid.LineColor = chart1.BackColor;
            chart1.ChartAreas[0].AxisY.MajorGrid.LineColor = chart1.BackColor;
        }

    }
}
